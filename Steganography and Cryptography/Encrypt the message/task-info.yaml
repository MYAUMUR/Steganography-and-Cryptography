type: edu
files:
  - name: src/cryptography/Main.kt
  visible: true
  text: |
    package cryptography

    import cryptography.command.Command
    import cryptography.io.Reader
    import java.io.File

    fun main() {
        val reader: Reader = Reader.ConsoleReader() // selectReader()
        while (true) {
            println("Task (hide, show, exit):")
            val command = when (reader.readln()) {
                "hide" -> Command.HideCommand(reader)
                "show" -> Command.ShowCommand(reader)
                "exit" -> Command.ExitCommand()
                else -> {
                    println("Invalid command!")
                    continue
                }
            }
            command.execute()
        }
    }

    private fun selectReader(): Reader {
        println("Read from: (file, console (Default)):")
        return when (readln().trim().lowercase()) {
            "file" -> {
                println("Enter file name (1.input.txt 2.show.txt):")
                val file = when (readln()) {
                    "1" -> File("input.txt")
                    "2" -> File("show.txt")
                    else -> throw IllegalArgumentException()
                }
                Reader.FileReader(file)
            }

            else -> Reader.ConsoleReader()
        }
    }
    learner_created: false
  - name: src/cryptography/util/Console.kt
    visible: true
    text: |
      package cryptography.util
      
      import cryptography.io.Reader
      import java.io.File
      
      class Console(private val reader: Reader) {
          fun getInputFileFromUser(): File {
              println("Input image file:")
              return File(reader.readln())
          }
          fun getOutputFileFromUser(): File {
              println("Output image file:")
              return File(reader.readln())
          }
          fun getMessageAsByteArray(): ByteArray = reader.readln().toByteArray()
      }
    learner_created: false
  - name: src/cryptography/command/Command.kt
    visible: true
    text: |
      package cryptography.command
      
      import cryptography.io.ImageIOHandler
      import cryptography.io.Reader
      import cryptography.util.Console
      import cryptography.util.Steganography
      import kotlin.system.exitProcess
      
      interface Command {
          fun execute()
      
          class HideCommand(reader: Reader) : Command {
              private val imageIOHandler: ImageIOHandler = ImageIOHandler()
              private val steganography: Steganography = Steganography()
              private val console: Console = Console(reader)
      
              override fun execute() {
                  val inputFile = console.getInputFileFromUser()
                  val outputFile = console.getOutputFileFromUser()
      
                  if (!inputFile.exists()) return println("Can't read input file!")
      
                  println("Message to hide:")
                  val terminator = byteArrayOf(0, 0, 3)
                  val messageBytesWithTerminator: ByteArray = console.getMessageAsByteArray() + terminator
                  val image = imageIOHandler.readImage(inputFile)
      
                  if (!steganography.canHideMessage(image, messageBytesWithTerminator)) {
                      return println("The input image is not large enough to hold this message.")
                  }
                  steganography.hideMessage(image, messageBytesWithTerminator)
                  imageIOHandler.writeImage(image, outputFile)
                  println("Message saved in $outputFile image.")
              }
          }
      
          class ExitCommand : Command {
              override fun execute() {
                  println("Bye!")
                  exitProcess(0)
              }
          }
      
          class ShowCommand(reader: Reader) : Command {
              private val console: Console = Console(reader)
              private val steganography = Steganography()
              private val imageIOHandler = ImageIOHandler()
              override fun execute() {
                  val inputFile = console.getInputFileFromUser()
                  if (!inputFile.exists()) return println("Can't read input file!")
                  val message = steganography.extractMessage(imageIOHandler.readImage(inputFile))
                  println("Message: \n$message")
              }
          }
      }
    learner_created: false
  - name: src/cryptography/util/BitOperator.kt
    visible: true
    text: |
      package cryptography.util
      
      class BitOperator {
          fun setLeastSignificantBit(colorToChange: Int, charBit: Int): Int =
              if (charBit == 1) {
                  colorToChange or 1
              } else {
                  colorToChange and 254
              }
      
          fun getLeastSignificantBit(value: Int): Int = value and 1
      }
    learner_created: false
  - name: test/small.png
    visible: false
    learner_created: false
  - name: test/SteganographyTest.kt
    visible: false
    text: |+
      import org.hyperskill.hstest.dynamic.DynamicTest
      import org.hyperskill.hstest.stage.StageTest
    import org.hyperskill.hstest.testcase.CheckResult
    import org.hyperskill.hstest.testing.TestedProgram
    import java.awt.Color
    import java.awt.image.BufferedImage
    import java.io.File
    import java.security.MessageDigest
    import javax.imageio.ImageIO

    class SteganographyTest: StageTest<Any>() {
        @DynamicTest
        fun imageCreateTest(): CheckResult {
            val main = TestedProgram()
            var outputString = main.start().toLowerCase().trim()
            if (!outputString.contains("task (hide, show, exit):")) {
                return CheckResult(false, "Prompt \"Task (hide, show, exit):\" is missing.")
            }

            outputString = main.execute("hide").toLowerCase().trim()
            if (!outputString.contains("input image file:")) {
                return CheckResult(false, "Wrong output after the \"hide\" command.")
            }

            try {
                val infile = "test/testimage.png"
                val inputFile = File(infile)
                if (!inputFile.exists()) {
                    return CheckResult(false, "Input test image file doesn't exist. Try reloading the project.")
                }
                val inputImage: BufferedImage = ImageIO.read(inputFile)
                if (imageHash(inputImage) != "cc5bc38fad61e51b44ec7731f49ae2e290c06f55") {
                    return CheckResult(false, "Input test image file is corrupted. Try reloading the project.")
                }

                outputString = main.execute(infile).toLowerCase().trim()
                if (!outputString.contains("output image file:")) {
                    return CheckResult(false, "Wrong output after inserting the input filename.")
                }

                val outfile = "test/out.png"
                outputString = main.execute(outfile).toLowerCase().trim()
                if (!outputString.contains("message to hide:")) {
                    return CheckResult(false, "Wrong output after inserting the output filename.")
                }

                val message = "Hyperskill steganography program."
                outputString = main.execute(message).toLowerCase().trim()
                if (!outputString.contains("password:")) {
                    return CheckResult(false, "Wrong output after inserting the message.")
                }

                val password = "mypassword"
                outputString = main.execute("mypassword").toLowerCase().trim()
                if ( ( !outputString.contains("message saved")
                    && outputString.contains("task (hide, show, exit):") ) ) {
                    return CheckResult(false, "Wrong output after inserting the password.")
                }

                val outputFile = File(outfile)
                if (!outputFile.exists()) {
                    return CheckResult(false, "Image file $outfile hasn't been created.")
                }
                val outputImage: BufferedImage = ImageIO.read(outputFile)
                if (imageHash(outputImage) != "cbe82b64ab5f3641afc22e8c9b688902506b3444") {
                    return CheckResult(false, "Wrong output file. Wrong output image hash.")
                }

                outputString = main.execute("show").toLowerCase().trim()
                if (!outputString.contains("input image file:")) {
                    return CheckResult(false, "Wrong output after the \"show\" command.")
                }

                outputString = main.execute(outfile).toLowerCase().trim()
                if (!outputString.contains("password:")) {
                    return CheckResult(false, "Wrong output after inserting the message.")
                }

                outputString = main.execute(password).toLowerCase().trim()
                if (!( outputString.contains("message:") && outputString.contains(message.toLowerCase()) &&
                            outputString.contains("task (hide, show, exit):") ) ) {
                    return CheckResult(false, "Wrong output after inserting the input filename.")
                }
            } catch (e: Exception) {
                return CheckResult(false, e.message)
            }

            outputString = main.execute("exit").toLowerCase().trim()
            if (!outputString.contains("bye!")) {
                return CheckResult(false, "Wrong output after the \"exit\" command.")
            }

            if (!main.isFinished) {
                return CheckResult(false, "Program has not terminated after the \"exit\" command.")
            }

            return CheckResult(true, "")
        }

        @DynamicTest
        fun smallImageTest(): CheckResult {
            val main = TestedProgram()
            var outputString = main.start().toLowerCase().trim()
            if (!outputString.contains("task (hide, show, exit):")) {
                return CheckResult(false, "Prompt \"Task (hide, show, exit):\" is missing.")
            }

            outputString = main.execute("hide").toLowerCase().trim()
            if (!outputString.contains("input image file:")) {
                return CheckResult(false, "Wrong output after the \"hide\" command.")
            }

            try {
                val infile = "test/small.png"
                val inputFile = File(infile)
                if (!inputFile.exists()) {
                    return CheckResult(false, "Input test image file doesn't exist. Try reloading the project.")
                }
                val inputImage: BufferedImage = ImageIO.read(inputFile)
                if (imageHash(inputImage) != "c4679ca63e03c377de73ab3aaede91f37a0d50b6") {
                    return CheckResult(false, "Input test image file is corrupted. Try reloading the project.")
                }

                outputString = main.execute(infile).toLowerCase().trim()
                if (!outputString.contains("output image file:")) {
                    return CheckResult(false, "Wrong output after inserting the input filename.")
                }

                val outfile = "test/out2.png"
                outputString = main.execute(outfile).toLowerCase().trim()
                if (!outputString.contains("message to hide:")) {
                    return CheckResult(false, "Wrong output after inserting the output filename.")
                }

                val message = "Hyperskill steganography program."
                outputString = main.execute(message).toLowerCase().trim()
                if (!outputString.contains("password:")) {
                    return CheckResult(false, "Wrong output after inserting the message.")
                }

                val password = "mypassword"
                outputString = main.execute(password).toLowerCase().trim()
                if ( !( outputString.contains("the input image is not large enough to hold this message") && outputString.contains("task (hide, show, exit):") ) ) {
                    return CheckResult(false, "The program should check that the image size is adequate for holding the Bytes array.")
                }

            } catch (e: Exception) {
                return CheckResult(false, e.message)
            }

            outputString = main.execute("exit").toLowerCase().trim()
            if (!outputString.contains("bye!")) {
                return CheckResult(false, "Wrong output after the \"exit\" command.")
            }

            if (!main.isFinished) {
                return CheckResult(false, "Program has not terminated after the \"exit\" command.")
            }

            return CheckResult(true, "")
        }

        private fun imageHash(inputImage: BufferedImage) : String {
            val imageByteArray = ByteArray(3 * inputImage.width * inputImage.height)
            var index = 0
            for (y in 0 until inputImage.height) {
                for (x in 0 until inputImage.width) {
                    val color = Color(inputImage.getRGB(x, y))
                    imageByteArray[index] = color.red.toByte()
                    index++
                    imageByteArray[index] = color.green.toByte()
                    index++
                    imageByteArray[index] = color.blue.toByte()
                    index++
                }
            }
            val md = MessageDigest.getInstance("SHA-1")
            md.update(imageByteArray)
            return md.digest().joinToString("") { "%02x".format(it) }
        }

    }

  learner_created: false
- name: test/testimage.png
  visible: false
  learner_created: false
  - name: src/cryptography/util/Converter.kt
    visible: true
    learner_created: true
  - name: src/cryptography/util/ImageUtil.kt
    visible: true
    learner_created: true
  - name: src/cryptography/util/MessageEncryptor.kt
    visible: true
    learner_created: true
  - name: test/out.png
    visible: true
    learner_created: true
  - name: test/out2.png
    visible: true
    learner_created: true
  - name: src/cryptography/util/Steganography.kt
    visible: true
    learner_created: true
feedback_link: https://hyperskill.org/projects/160/stages/833/implement#comment
status: Solved
feedback:
  message: Well done! You've finished the project. Select a new project on <a href="https://hyperskill.org/projects">Hyperskill</a>
    to continue learning.
  time: "Wed, 07 Jun 2023 07:34:59 UTC"
record: 3
